apiVersion: v1
kind: ConfigMap
metadata:
  name: temperature-exporter
  namespace: monitoring
data:
  temperature_exporter.py: |
    #!/usr/bin/env python3
    import os
    import glob
    import time
    import subprocess
    from prometheus_client import start_http_server, Gauge

    # Metrics
    temperature_celsius = Gauge('node_temperature_celsius', 'Hardware temperature sensors', ['chip', 'sensor', 'label'])
    cpu_package_temp = Gauge('node_cpu_package_temp_celsius', 'CPU package temperature')
    nvme_temp = Gauge('node_nvme_temp_celsius', 'NVMe drive temperature', ['device'])
    thermal_zone_temp = Gauge('node_thermal_zone_celsius', 'Thermal zone temperatures', ['zone', 'type'])
    
    def read_hwmon_temps():
        """Read temperatures from hwmon sysfs"""
        temps = {}
        
        # Find all hwmon devices
        hwmon_dirs = glob.glob('/host/sys/class/hwmon/hwmon*')
        
        for hwmon in hwmon_dirs:
            try:
                # Read chip name
                name_file = os.path.join(hwmon, 'name')
                if os.path.exists(name_file):
                    with open(name_file, 'r') as f:
                        chip_name = f.read().strip()
                else:
                    chip_name = os.path.basename(hwmon)
                
                # Read all temperature inputs
                temp_inputs = glob.glob(os.path.join(hwmon, 'temp*_input'))
                
                for temp_input in temp_inputs:
                    sensor_num = temp_input.split('temp')[1].split('_')[0]
                    
                    # Read temperature value
                    with open(temp_input, 'r') as f:
                        temp_value = int(f.read().strip()) / 1000.0  # Convert to Celsius
                    
                    # Try to read label
                    label_file = temp_input.replace('_input', '_label')
                    if os.path.exists(label_file):
                        with open(label_file, 'r') as f:
                            label = f.read().strip()
                    else:
                        label = f"temp{sensor_num}"
                    
                    # Set metric
                    temperature_celsius.labels(chip=chip_name, sensor=sensor_num, label=label).set(temp_value)
                    
                    # Track CPU package temp specially
                    if 'Package' in label or 'Tctl' in label:
                        cpu_package_temp.set(temp_value)
                    
            except Exception as e:
                print(f"Error reading hwmon {hwmon}: {e}")
    
    def read_thermal_zones():
        """Read thermal zone temperatures"""
        try:
            thermal_zones = glob.glob('/host/sys/class/thermal/thermal_zone*')
            for zone in thermal_zones:
                zone_num = zone.split('thermal_zone')[1]
                
                # Read zone type
                type_file = os.path.join(zone, 'type')
                if os.path.exists(type_file):
                    with open(type_file, 'r') as f:
                        zone_type = f.read().strip()
                else:
                    zone_type = f"zone{zone_num}"
                
                # Read temperature
                temp_file = os.path.join(zone, 'temp')
                if os.path.exists(temp_file):
                    with open(temp_file, 'r') as f:
                        temp = int(f.read().strip()) / 1000.0
                        thermal_zone_temp.labels(zone=zone_num, type=zone_type).set(temp)
        except Exception as e:
            print(f"Error reading thermal zones: {e}")
    
    def read_razer_sensors():
        """Try to read Razer-specific sensors"""
        try:
            # Check for Razer device paths
            razer_paths = [
                '/sys/bus/hid/drivers/razerkbd/',
                '/sys/bus/hid/drivers/razermouse/',
                '/sys/bus/usb/drivers/razeraccessory/'
            ]
            
            for path in razer_paths:
                if os.path.exists(path):
                    devices = glob.glob(os.path.join(path, '*:*:*.*'))
                    for device in devices:
                        # Look for temperature files
                        temp_files = glob.glob(os.path.join(device, '*temp*'))
                        for temp_file in temp_files:
                            try:
                                with open(temp_file, 'r') as f:
                                    temp = int(f.read().strip())
                                    # Razer temps might be in different units
                                    if temp > 200:  # Likely in millicelsius
                                        temp = temp / 1000.0
                                    label = os.path.basename(temp_file)
                                    temperature_celsius.labels(
                                        chip='razer',
                                        sensor=os.path.basename(device),
                                        label=label
                                    ).set(temp)
                            except:
                                pass
        except Exception as e:
            print(f"Error reading Razer sensors: {e}")
    
    def read_nvme_temps():
        """Read NVMe temperatures using nvme-cli"""
        try:
            # Get list of NVMe devices
            nvme_list = subprocess.run(['nvme', 'list', '-o', 'json'], 
                                     capture_output=True, text=True)
            if nvme_list.returncode == 0:
                import json
                devices = json.loads(nvme_list.stdout).get('Devices', [])
                
                for device in devices:
                    dev_path = device.get('DevicePath', '')
                    if dev_path:
                        # Get smart log
                        smart_log = subprocess.run(['nvme', 'smart-log', dev_path, '-o', 'json'],
                                                 capture_output=True, text=True)
                        if smart_log.returncode == 0:
                            smart_data = json.loads(smart_log.stdout)
                            temp = smart_data.get('temperature', 0) - 273  # Kelvin to Celsius
                            nvme_temp.labels(device=dev_path).set(temp)
        except Exception as e:
            print(f"Error reading NVMe temps: {e}")
    
    def collect_metrics():
        read_hwmon_temps()
        read_thermal_zones()
        read_razer_sensors()
        read_nvme_temps()
    
    if __name__ == '__main__':
        print("Starting Temperature Exporter on port 9837")
        start_http_server(9837)
        
        while True:
            collect_metrics()
            time.sleep(10)
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: temperature-exporter
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: temperature-exporter
  template:
    metadata:
      labels:
        app: temperature-exporter
    spec:
      hostPID: true
      hostNetwork: true
      containers:
      - name: temperature-exporter
        image: python:3.11-slim
        command: ["/bin/bash", "-c"]
        args:
        - |
          apt-get update && apt-get install -y nvme-cli lm-sensors
          pip install prometheus_client
          python /scripts/temperature_exporter.py
        ports:
        - containerPort: 9837
          name: metrics
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        - name: sys
          mountPath: /host/sys
          readOnly: true
        securityContext:
          privileged: true
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: scripts
        configMap:
          name: temperature-exporter
          defaultMode: 0755
      - name: sys
        hostPath:
          path: /sys
          type: Directory
---
apiVersion: v1
kind: Service
metadata:
  name: temperature-exporter
  namespace: monitoring
  labels:
    app: temperature-exporter
spec:
  selector:
    app: temperature-exporter
  ports:
  - name: metrics
    port: 9837
    targetPort: 9837
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: temperature-exporter
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: temperature-exporter
  endpoints:
  - port: metrics
    interval: 30s